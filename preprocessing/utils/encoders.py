"""
encoders.py

This module provides functions for encoding categorical variables.
It includes ordinal encoding, one-hot encoding, and binary encoding.

Functions:
- ordinal_encode: Apply ordinal encoding to a categorical column.
- one_hot_encode: Apply one-hot encoding to categorical columns.
- define_binary_codes: Define binary mapping for a categorical column.
"""

import pandas as pd
from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder
from typing import List, Tuple, Dict


def ordinal_encode(
        df: pd.DataFrame, column: str, categories: List[str]
) -> Tuple[pd.DataFrame, OrdinalEncoder]:
    """
    Apply ordinal encoding to a categorical column.

    This function converts a categorical column into ordinal values,
    where each category is mapped to an integer based on its
    order defined in the 'categories' list.

    Args:
        df (pd.DataFrame): The input DataFrame containing the categorical column.
        column (str): The name of the column to encode.
        categories (List[str]): Ordered list of categories for encoding, where
                                the order represents the rank of the categories.

    Returns:
        Tuple[pd.DataFrame, OrdinalEncoder]:
            - The transformed DataFrame with the encoded column.
            - The fitted OrdinalEncoder that can be used for inverse transformation.
    """
    encoder = OrdinalEncoder(categories=[categories])
    df[column] = encoder.fit_transform(df[[column]])
    return df, encoder

def one_hot_encode(df: pd.DataFrame, categorical_cols: List[str]) -> Tuple[pd.DataFrame, OneHotEncoder, List[str]]:
    """
    Apply one-hot encoding to categorical columns.

    This function creates binary columns for each category in the provided
    categorical columns. Each new column corresponds to a category,
    with values 1 or 0 representing the presence or absence of that category.

    Args:
        df (pd.DataFrame): The input DataFrame containing the categorical columns.
        categorical_cols (List[str]): List of column names that need to be one-hot encoded.

    Returns:
        Tuple[pd.DataFrame, OneHotEncoder, List[str]]:
            - The transformed DataFrame with the one-hot encoded columns.
            - The fitted OneHotEncoder that can be used for inverse transformation.
            - A list of the new column names generated by the encoder.
    """
    encoder = OneHotEncoder(sparse_output=False, handle_unknown="ignore")
    encoder.fit(df[categorical_cols])
    encoded_cols = list(encoder.get_feature_names_out(categorical_cols))

    df[encoded_cols] = encoder.transform(df[categorical_cols])
    df = df.drop(columns=categorical_cols)
    return df, encoder, encoded_cols

def define_binary_codes(column: pd.Series) -> Dict[str, int]:
    """
    Define binary mapping for a categorical column.

    This function creates a binary mapping for a categorical column by
    assigning '0' to the category with the smallest relative frequency
    and '1' to the category with the largest relative frequency.

    Args:
        column (pd.Series): The categorical column to encode.

    Returns:
        Dict[str, int]: A dictionary where keys are the category values
                        and values are their corresponding binary codes.
                        The category with the smallest frequency is mapped to 0,
                        and the category with the largest frequency is mapped to 1.
    """
    counts = column.value_counts(normalize=True) * 100
    return {counts.idxmin(): 0, counts.idxmax(): 1}
